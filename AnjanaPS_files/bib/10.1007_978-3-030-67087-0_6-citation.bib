@InProceedings{10.1007/978-3-030-67087-0_6,
author="Anjana, Parwat Singh
and Attiya, Hagit
and Kumari, Sweta
and Peri, Sathya
and Somani, Archit",
editor="Georgiou, Chryssis
and Majumdar, Rupak",
title="Efficient Concurrent Execution of Smart Contracts in Blockchains Using Object-Based Transactional Memory",
booktitle="Networked Systems",
year="2021",
publisher="Springer International Publishing",
address="Cham",
pages="77--93",
abstract="Several popular blockchains such as Ethereum execute complex transactions through user-defined scripts. A block of the chain typically consists of multiple smart contract transactions (SCTs). To append a block into the blockchain, a miner executes these SCTs. On receiving this block, other nodes act as validators, who re-execute these SCTs as part of the consensus protocol to validate the block. In Ethereum and other blockchains that support cryptocurrencies, a miner gets an incentive every time such a valid block is successfully added to the blockchain. When executing SCTs sequentially, miners and validators fail to harness the power of multiprocessing offered by the prevalence of multi-core processors, thus degrading throughput. By leveraging multiple threads to execute SCTs, we can achieve better efficiency and higher throughput. Recently, Read-Write Software Transactional Memory Systems (RWSTMs) were used for concurrent execution of SCTs. It is known that Object-based STMs (OSTMs), using higher-level objects (such as hash-tables or lists), achieve better throughput as compared to RWSTMs. Even greater concurrency can be obtained using Multi-Version OSTMs (MVOSTMs), which maintain multiple versions for each shared data item as opposed to Single-Version OSTMs (SVOSTMs).",
isbn="978-3-030-67087-0"
}

